/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "balanced";
    tapping-term-ms = <150>;
    quick-tap-ms = <150>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <150>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos { compatible = "zmk,combos"; };

    behaviors {
        rpi: rpi {
            compatible = "zmk,behavior-hold-tap";
            label = "RPI";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q        &kp W         &kp E        &kp R        &kp T        &kp Y        &kp U            &kp I           &kp O         &kp P
  &mt LSHFT A  &rpi LCTRL S  &rpi LALT D  &rpi LGUI F  &kp G        &kp H        &rpi LGUI J      &rpi LALT K     &rpi LCTRL L  &mt LSHFT SINGLE_QUOTE
  &kp Z        &kp X         &kp C        &kp V        &kp B        &kp N        &kp M            &kp COMMA       &kp DOT       &kp FSLH
                             &lt 5 ESC    &lt 1 SPACE  &lt 2 TAB    &lt 3 ENTER  &lt 4 BACKSPACE  &kp LANGUAGE_1
            >;
        };

        nav {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans    &trans         &trans        &trans     &trans
  &trans  &trans  &trans  &trans  &trans    &kp LEFT  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &kp HOME  &kp PAGE_DOWN  &kp PG_UP     &kp END    &trans
                  &trans  &trans  &trans    &trans    &trans         &trans
            >;
        };

        mouse {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans          &kp C_VOLUME_UP  &trans        &trans           &trans
  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
  &trans  &trans  &trans  &trans  &trans    &trans          &trans           &trans        &trans           &trans
                  &trans  &trans  &trans    &mkp MB4        &mkp LCLK        &mkp RCLK
            >;
        };

        sym {
            bindings = <
  &kp LBRC   &kp AMPS  &kp ASTERISK  &kp LPAR   &kp RBRC     &trans  &trans  &trans  &trans  &trans
  &kp COLON  &kp DLLR  &kp PRCNT     &kp CARET  &kp PLUS     &trans  &trans  &trans  &trans  &trans
  &kp TILDE  &kp EXCL  &kp AT        &kp HASH   &kp PIPE     &trans  &trans  &trans  &trans  &trans
                       &kp LPAR      &kp RPAR   &kp UNDER    &trans  &trans  &trans
            >;
        };

        num {
            bindings = <
  &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &trans  &trans  &trans  &trans  &trans
  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &trans  &trans  &trans  &trans  &trans
  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &trans  &trans  &trans  &trans  &trans
                     &kp DOT  &kp N0  &kp MINUS    &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3    &none       &none              &none            &none       &none
  &kp LSHFT   &kp LCTRL     &kp LALT      &kp LGUI      &out OUT_TOG    &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &none
  &none       &none         &none         &none         &none           &none       &none              &none            &none       &none
                            &none         &none         &none           &kp C_STOP  &kp C_PP           &kp C_MUTE
            >;
        };
    };
};
